// Code generated by MockGen. DO NOT EDIT.
// Source: printer.go

// Package migrate is a generated GoMock package.
package migrate

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPrinter is a mock of Printer interface
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// Print mocks base method
func (m *MockPrinter) Print(a ...interface{}) {
	varargs := []interface{}{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Print", varargs...)
}

// Print indicates an expected call of Print
func (mr *MockPrinterMockRecorder) Print(a ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockPrinter)(nil).Print), a...)
}

// Println mocks base method
func (m *MockPrinter) Println(a ...interface{}) {
	varargs := []interface{}{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Println", varargs...)
}

// Println indicates an expected call of Println
func (mr *MockPrinterMockRecorder) Println(a ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockPrinter)(nil).Println), a...)
}

// Printf mocks base method
func (m *MockPrinter) Printf(format string, a ...interface{}) {
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf
func (mr *MockPrinterMockRecorder) Printf(format interface{}, a ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockPrinter)(nil).Printf), varargs...)
}
