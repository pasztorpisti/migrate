// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package migrate is a generated GoMock package.
package migrate

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDriver is a mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockDriver) Open(dataSourceName string) (DB, error) {
	ret := m.ctrl.Call(m, "Open", dataSourceName)
	ret0, _ := ret[0].(DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockDriverMockRecorder) Open(dataSourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDriver)(nil).Open), dataSourceName)
}

// NewMigrationDB mocks base method
func (m *MockDriver) NewMigrationDB(tableName string) (MigrationDB, error) {
	ret := m.ctrl.Call(m, "NewMigrationDB", tableName)
	ret0, _ := ret[0].(MigrationDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMigrationDB indicates an expected call of NewMigrationDB
func (mr *MockDriverMockRecorder) NewMigrationDB(tableName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMigrationDB", reflect.TypeOf((*MockDriver)(nil).NewMigrationDB), tableName)
}
