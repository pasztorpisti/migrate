// Code generated by MockGen. DO NOT EDIT.
// Source: step.go

// Package migrate is a generated GoMock package.
package migrate

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStep is a mock of Step interface
type MockStep struct {
	ctrl     *gomock.Controller
	recorder *MockStepMockRecorder
}

// MockStepMockRecorder is the mock recorder for MockStep
type MockStepMockRecorder struct {
	mock *MockStep
}

// NewMockStep creates a new mock instance
func NewMockStep(ctrl *gomock.Controller) *MockStep {
	mock := &MockStep{ctrl: ctrl}
	mock.recorder = &MockStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStep) EXPECT() *MockStepMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockStep) Execute(arg0 ExecCtx) error {
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockStepMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStep)(nil).Execute), arg0)
}

// AllowsTransaction mocks base method
func (m *MockStep) AllowsTransaction() bool {
	ret := m.ctrl.Call(m, "AllowsTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowsTransaction indicates an expected call of AllowsTransaction
func (mr *MockStepMockRecorder) AllowsTransaction() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowsTransaction", reflect.TypeOf((*MockStep)(nil).AllowsTransaction))
}

// Print mocks base method
func (m *MockStep) Print(arg0 PrintCtx) {
	m.ctrl.Call(m, "Print", arg0)
}

// Print indicates an expected call of Print
func (mr *MockStepMockRecorder) Print(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockStep)(nil).Print), arg0)
}
