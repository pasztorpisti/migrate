// Code generated by MockGen. DO NOT EDIT.
// Source: migration_db.go

// Package core is a generated GoMock package.
package core

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDriverFactory is a mock of DriverFactory interface
type MockDriverFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDriverFactoryMockRecorder
}

// MockDriverFactoryMockRecorder is the mock recorder for MockDriverFactory
type MockDriverFactoryMockRecorder struct {
	mock *MockDriverFactory
}

// NewMockDriverFactory creates a new mock instance
func NewMockDriverFactory(ctrl *gomock.Controller) *MockDriverFactory {
	mock := &MockDriverFactory{ctrl: ctrl}
	mock.recorder = &MockDriverFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriverFactory) EXPECT() *MockDriverFactoryMockRecorder {
	return m.recorder
}

// NewDriver mocks base method
func (m *MockDriverFactory) NewDriver(params map[string]string) (Driver, error) {
	ret := m.ctrl.Call(m, "NewDriver", params)
	ret0, _ := ret[0].(Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDriver indicates an expected call of NewDriver
func (mr *MockDriverFactoryMockRecorder) NewDriver(params interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDriver", reflect.TypeOf((*MockDriverFactory)(nil).NewDriver), params)
}

// MockDriver is a mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockDriver) Open(dataSourceName string) (ClosableDB, error) {
	ret := m.ctrl.Call(m, "Open", dataSourceName)
	ret0, _ := ret[0].(ClosableDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockDriverMockRecorder) Open(dataSourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDriver)(nil).Open), dataSourceName)
}

// NewMigrationDB mocks base method
func (m *MockDriver) NewMigrationDB() (MigrationDB, error) {
	ret := m.ctrl.Call(m, "NewMigrationDB")
	ret0, _ := ret[0].(MigrationDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMigrationDB indicates an expected call of NewMigrationDB
func (mr *MockDriverMockRecorder) NewMigrationDB() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMigrationDB", reflect.TypeOf((*MockDriver)(nil).NewMigrationDB))
}

// MockMigrationDB is a mock of MigrationDB interface
type MockMigrationDB struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationDBMockRecorder
}

// MockMigrationDBMockRecorder is the mock recorder for MockMigrationDB
type MockMigrationDBMockRecorder struct {
	mock *MockMigrationDB
}

// NewMockMigrationDB creates a new mock instance
func NewMockMigrationDB(ctrl *gomock.Controller) *MockMigrationDB {
	mock := &MockMigrationDB{ctrl: ctrl}
	mock.recorder = &MockMigrationDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrationDB) EXPECT() *MockMigrationDBMockRecorder {
	return m.recorder
}

// GetForwardMigrations mocks base method
func (m *MockMigrationDB) GetForwardMigrations(arg0 Querier) ([]*MigrationNameAndTime, error) {
	ret := m.ctrl.Call(m, "GetForwardMigrations", arg0)
	ret0, _ := ret[0].([]*MigrationNameAndTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForwardMigrations indicates an expected call of GetForwardMigrations
func (mr *MockMigrationDBMockRecorder) GetForwardMigrations(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForwardMigrations", reflect.TypeOf((*MockMigrationDB)(nil).GetForwardMigrations), arg0)
}

// CreateTable mocks base method
func (m *MockMigrationDB) CreateTable() (Step, error) {
	ret := m.ctrl.Call(m, "CreateTable")
	ret0, _ := ret[0].(Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockMigrationDBMockRecorder) CreateTable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockMigrationDB)(nil).CreateTable))
}

// ForwardMigrate mocks base method
func (m *MockMigrationDB) ForwardMigrate(migrationName string) (Step, error) {
	ret := m.ctrl.Call(m, "ForwardMigrate", migrationName)
	ret0, _ := ret[0].(Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForwardMigrate indicates an expected call of ForwardMigrate
func (mr *MockMigrationDBMockRecorder) ForwardMigrate(migrationName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardMigrate", reflect.TypeOf((*MockMigrationDB)(nil).ForwardMigrate), migrationName)
}

// BackwardMigrate mocks base method
func (m *MockMigrationDB) BackwardMigrate(migrationName string) (Step, error) {
	ret := m.ctrl.Call(m, "BackwardMigrate", migrationName)
	ret0, _ := ret[0].(Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackwardMigrate indicates an expected call of BackwardMigrate
func (mr *MockMigrationDBMockRecorder) BackwardMigrate(migrationName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackwardMigrate", reflect.TypeOf((*MockMigrationDB)(nil).BackwardMigrate), migrationName)
}
